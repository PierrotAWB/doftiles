source $XDG_CONFIG_HOME/vim/autoload/plug.vim

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                                 Default settings                             "
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

filetype plugin on
filetype indent on
syntax on

"hi! Normal ctermbg=NONE guibg=NONE
"hi! NonText ctermbg=NONE guibg=NONE

set autoindent
set backspace=indent,eol,start
set confirm 
set cmdheight=2
set incsearch
set iskeyword+=:
set laststatus=2
set nocompatible
set mouse=a
set nocp
set number
set pastetoggle=<F10>
set path+=**
set relativenumber
set rtp+=$XDG_CONFIG_HOME/vim/autoload
set shellslash
set shiftwidth=4
set showcmd
set swf!|set swf!
set tabstop=4
set termguicolors
set t_Co=256
set tw=80
set undodir=$XDG_DATA_HOME/vim/undodir
set undofile
set updatetime=500
"#set visualbell
set viminfo+='1000,n$XDG_DATA_HOME/vim/viminfo
set wildcharm=<Tab>

set timeoutlen=1000
set ttimeoutlen=0

let &t_8f="\<Esc>[38;2;%lu;%lu;%lum"
let &t_8b="\<Esc>[48;2;%lu;%lu;%lum"
set termguicolors

highlight LineNr ctermfg=red


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                             Global variables                                 "
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

let g:livepreview_engine 				= 'pdflatex'
let g:livepreview_previewer 			= 'zathura'
let g:Powerline_symbols					='fancy'
let g:Tex_CompileRule_pdf 				= 'latexmk -pdf -f $*'
let g:Tex_DefaultTargetFormat 			= 'pdf'
let g:tex_flavor 						= 'latex'
let g:Tex_GotoError						= 0
let g:Tex_ViewRule_pdf 					= 'zathura'

let g:netrw_banner						= 0
let g:netrw_dirhistmax					= 0

let g:vimtex_view_method				= 'zathura'
let g:vimtex_quickfix_mode				= 0
let g:conceallevel						= 1
let g:tex_conceal						= 'abdmg'

" make YCM compatible with UltiSnips (using supertab)
let g:ycm_use_ultisnips_completer 		= 0
let g:ycm_key_list_select_completion 	= ['<C-n>', '<Down>']
let g:ycm_key_list_previous_completion 	= ['<C-p>', '<Up>']
let g:SuperTabDefaultCompletionType 	= '<C-n>'
let g:ycm_filetype_blacklist 			= { 'tex': 1 }

let g:UltiSnipsEditSplit				= "context"
let g:UltiSnipsExpandTrigger			= "<tab>"
let g:UltiSnipsJumpForwardTrigger		= "<c-j>"
let g:UltiSnipsJumpBackwardTrigger		= "<c-k>"
let g:UltiSnipsSnippetDirectories		= [$XDG_CONFIG_HOME.'/vim/plugged/ultisnips']

let g:UltiSnipsUsePythonVersion			= 3

let g:ycm_auto_hover					= ""


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                            General Keybindings                               "
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" To undo, control-z.
nnoremap <C-z> :undo<CR>
inoremap <C-z> <Esc>:undo<CR>

" To alternate folds, use space (normal mode).
nmap <space> za

" Toggle Canadian English spell check.
nmap <F6> :set spell! spelllang=en_ca<CR>

" Indentation.
nnoremap <F12> :w <Bar> exec ':normal gg=G``zz'<CR>

" Search and replace.
nnoremap <C-@> :%s/

" Renaming.
" Local.
nnoremap gr gd[{V%::s/<C-R>///gc<left><left><left> 
" Global.
nnoremap gR gD:%s/<C-R>///gc<left><left><left>

" Save.
nnoremap <C-s> :w<CR>
inoremap <C-s> <Esc>:w<CR>

" Select all.
nnoremap <C-a> ggVG

" Ctags bindings.
nnoremap <C-\> :vsp<CR>:exec("tag ".expand("<cword>"))<CR>

" Fly between buffers.
nnoremap gb :Buffers<CR>

nmap <leader>D <plug>(YCMHover)

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                                  Plugins                                     "
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

call plug#begin('~/.config/vim/plugged')

" LaTeX
Plug 'lervag/vimtex'
Plug 'xuhdev/vim-latex-live-preview', { 'for': 'tex' }

" Snippets
Plug 'SirVer/ultisnips'

" Linting
Plug 'neomake/neomake'

" Completion
Plug 'ycm-core/YouCompleteMe', { 'do': './install.py --clangd-completer --ts-completer' }
Plug 'ervandew/supertab'

" Search
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'

call plug#end()


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                               File Settings                                  "
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

au BufReadPost,BufNewFile *.md,*.txt,*.tex setlocal nofoldenable
au FileType tex setlocal syntax=off

" Run a program in terminal.
augroup run_program
	autocmd Filetype py nnoremap <F1> :w <bar> exec ':term python %'<CR>
	autocmd Filetype c nnoremap <F1> :w <bar> exec ':term gcc % -o %:r'<CR>
    autocmd Filetype cpp nnoremap <C-c> :execute ':term ++hidden st-hook cpp-compile %:r %' <CR>
    autocmd Filetype cpp nnoremap <C-e> :execute ':term ++hidden st-hook cpp-exec %:r'<CR>
augroup END

" (un)comment blocks of code.
augroup commenting_blocks_of_code
	autocmd!
	autocmd FileType c,cpp,java,javascript let b:comment_leader = '// '
	autocmd FileType sh,ruby,python,R 	   let b:comment_leader = '# '
	autocmd FileType conf,fstab,zsh   	   let b:comment_leader = '# '
	autocmd FileType tex              	   let b:comment_leader = '% '
	autocmd FileType mail             	   let b:comment_leader = '> '
	autocmd FileType vim              	   let b:comment_leader = '" '
augroup END

function! CommentToggle()
    execute ':silent! s/\([^ ]\)/' . escape(b:comment_leader,'\/') . ' \1/'
    execute ':silent! s/^\( *\)' . escape(b:comment_leader,'\/') . ' \?' . escape(b:comment_leader,'\/') . ' \?/\1/'
endfunction

map <C-_> :call CommentToggle()<CR>

